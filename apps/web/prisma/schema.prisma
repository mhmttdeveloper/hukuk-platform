// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String            @id @default(uuid())
  name           String
  surname        String
  email          String            @unique
  passwordHash   String
  role           UserRole          @default(MEMBER)
  verifiedStatus VerificationStatus @default(PENDING)
  profession     String
  bio            String?
  socialLinks    Json? // { linkedin?: string, twitter?: string, website?: string }
  contactInfo    Json? // { phone?: string, address?: string, city?: string }
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  publications   Publication[]
  ratings       Rating[]
  comments      Comment[]
  references    Reference[]

  @@map("users")
}

model Publication {
  id               String            @id @default(uuid())
  title            String
  slug             String            @unique
  metaDescription  String
  categoryId       String
  authorId         String
  content          String
  featuredImage    String?
  seoScore         Int               @default(0)
  status           PublicationStatus @default(DRAFT)
  allowComments    Boolean           @default(true)
  allowRatings     Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  category         Category          @relation(fields: [categoryId], references: [id])
  author           User              @relation(fields: [authorId], references: [id])
  ratings          Rating[]
  comments         Comment[]
  references       Reference[]
  citations        Citation[]

  @@map("publications")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  slug         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Relations
  publications Publication[]

  @@map("categories")
}

model Rating {
  id             String   @id @default(uuid())
  publicationId  String
  userId         String?
  score          Int      @db.SmallInt
  createdAt      DateTime @default(now())

  // Relations
  publication    Publication @relation(fields: [publicationId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@map("ratings")
}

model Comment {
  id             String        @id @default(uuid())
  publicationId  String
  userId         String?
  content        String
  createdAt      DateTime      @default(now())
  status         CommentStatus @default(PENDING)

  // Relations
  publication    Publication   @relation(fields: [publicationId], references: [id])
  user          User?          @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Reference {
  id             String        @id @default(uuid())
  type           ReferenceType
  label          String
  linkedId       String?
  publicationId  String
  createdAt      DateTime      @default(now())

  // Relations
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  publication    Publication   @relation(fields: [publicationId], references: [id])

  @@map("references")
}

// Yeni AtÄ±f Sistemi
model Citation {
  id             String        @id @default(uuid())
  publicationId  String
  type           CitationType
  title          String
  description    String?
  url            String?
  lawId          String?
  lawArticleId   String?
  caseId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  publication    Publication   @relation(fields: [publicationId], references: [id])
  law            Law?          @relation(fields: [lawId], references: [id])
  lawArticle     LawArticle?   @relation(fields: [lawArticleId], references: [id])
  case           Case?         @relation(fields: [caseId], references: [id])

  @@map("citations")
}

model Law {
  id          String        @id @default(uuid())
  title       String
  slug        String        @unique
  description String?
  fullText    String
  sourceFile  String?       // Original file path
  fileType    String?       // PDF, DOC, TXT
  fileSize    Int?          // File size in bytes
  status      LawStatus     @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  articles    LawArticle[]
  citations   Citation[]

  @@map("laws")
}

model LawArticle {
  id          String   @id @default(uuid())
  lawId       String
  number      String
  title       String?
  text        String
  slug        String   @unique
  orderIndex  Int      // For maintaining article order
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  law         Law      @relation(fields: [lawId], references: [id])
  citations   Citation[]

  @@map("law_articles")
}

model Case {
  id          String      @id @default(uuid())
  title       String
  court       String
  caseNumber  String?
  date        DateTime
  text        String
  sourceFile  String?     // Original file path
  fileType    String?     // PDF, DOC, TXT
  fileSize    Int?        // File size in bytes
  status      CaseStatus  @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  citations  Citation[]

  @@map("cases")
}

// Enums
enum UserRole {
  ADMIN
  EDITOR
  AUTHOR
  MEMBER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum PublicationStatus {
  DRAFT
  REVIEW
  PUBLISHED
  UPDATED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReferenceType {
  LAW
  CASE
}

enum CitationType {
  LAW_ARTICLE
  COURT_CASE
  EXTERNAL_LINK
  BOOK
  ARTICLE
}

enum LawStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CaseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
